@using Microsoft.AspNetCore.Mvc.Localization

@model SigningModel

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Sign";
}

<script type="text/javascript">

    function onSigningClientMessage(event) {

        // Signing payload produced by SP, containing signature parameters and DTBS.
        let signingPayload = @Model.SerializedHTMLString();

        const win = document.getElementById("signing-window").contentWindow;
        const message = event.data;

        // OWASP HTML5 Security - must protect calling frame unsafe web messaging
        let origin = "@Model.SigningClientURL";
        if(!origin.startsWith(event.origin)) {
            console.error("SP: event '"+event.origin+"' origin rejected");
          return
        }

        // Message received from SigningClient when loaded and ready
        if (message.command === "SendParameters") {
            console.log("SP: Posting parameters to signing client");
            console.log("SP Parameters are: " + '@Model.SerializedHTMLString()');
            const params = {
                command: 'parameters',
                content: signingPayload
            };
            win.postMessage(params, '*');

            // Release memory
            signingPayload = null;
        }

        // Message received from SigningClient when either the document has been signed,
        // a signing error has occurred, or when the user has cancelled the signing operation.
        if (message.command === "signedDocument" || message.command === "errorResponse" || message.command === "cancelSign") {
        console.log("SP: Signing Result: " + message.command);
        document.signingResult.type.value = message.command;
        document.signingResult.result.value = message.content;
        document.signingResult.submit();
        }
    }

    // Listen for events from the Signing Client
    if (window.addEventListener) {
        window.addEventListener("message", onSigningClientMessage);
    } else if (window.attachEvent) {
        window.attachEvent("onmessage", onSigningClientMessage);
    }

</script>

<div>
    <div class="signing-container page-layout">
        <iframe id="signing-window" sandbox="allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox" src="@Model.SigningClientURL">
        </iframe>
    </div>

    <form name="signingResult" action="/Home/SigningResult" method="post">
        <input type="hidden" name="type" value="" /> 
        <input type="hidden" name="result" value="" />
        <input type="hidden" name="name" value="@Model.SignersDocument?.SignersDocumentFile?.Name" />
        <input type="hidden" name="format" value="@Model.Format" />
    </form>
</div>